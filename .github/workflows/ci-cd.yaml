name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin

    - name: Build and push Docker image
      run: |
        docker build -t syddselin/nodejs-app:latest .
        docker push syddselin/nodejs-app:latest

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref_name == 'staging'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up ArgoCD CLI
      run: |
        curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        chmod +x /usr/local/bin/argocd

    - name: Deploy to Staging
      env:
        ARGOCD_SERVER_URL: ${{ secrets.ARGOCD_SERVER_URL }}
        ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
        ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
      run: |
        argocd login $ARGOCD_SERVER_URL --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure
        argocd app sync nodejs-express-mysql-staging
        argocd app wait nodejs-express-mysql-staging --timeout 300

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref_name == 'main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up ArgoCD CLI
      run: |
        curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        chmod +x /usr/local/bin/argocd

    - name: Deploy to Production
      env:
        ARGOCD_SERVER_URL: ${{ secrets.ARGOCD_SERVER_URL }}
        ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
        ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
      run: |
        argocd login $ARGOCD_SERVER_URL --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure
        argocd app sync nodejs-express-mysql-production
        argocd app wait nodejs-express-mysql-production --timeout 300
